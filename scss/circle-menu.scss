/* -----------------------------------------------------------------------------

  Circle Menu Component

----------------------------------------------------------------------------- */
/**
 * This is the actual menu component. It consists of a menu element with an
 * unordered list inside, and also a button to toggle the actual menu.
 * It's fixed to the bottom-right of the screen, and each of the items are
 * positioned absolutely inside the parent menu tag. The default set up above is
 * 5 menu items. Because all the transforms and such are calculated wrt
 * this number, you'll need to edit it accordingly depending on how many items
 * you decide to put in the markup.
 *
 * Example markup:
 *
 * <menu class="c-circle-menu">
 *   <ul class="c-circle-menu__items">
 *     <li class="c-circle-menu__item">
 *       <a class="c-circle-menu__link"></a>
 *     </li>
 *     <li class="c-circle-menu__item">
 *       <a class="c-circle-menu__link"></a>
 *     </li>
 *     ...
 *   </ul>
 * </menu>
 */
.c-circle-menu {
  position: absolute;
	bottom: 85px;
    right: 33px;
  z-index: 1000;
  width: 70px;
  height: 70px;
  border-radius: 50%;
}

.c-circle-menu.is-active{
	    width: 110px;
    height: 110px;
}

.c-circle-menu__items {
  display: block;
  list-style: none;
  position: absolute;
  z-index: 2;
  margin: 0;
  padding: 0;
}

.c-circle-menu__item {
  display: block;
  position: absolute;
  top: 0;
  left: 0;
  width: 42px;
  height: 42px;
  border-radius: 50%;
  opacity: 0;
  -webkit-transition: opacity, -webkit-transform;
  transition: opacity, -webkit-transform;
  transition: transform, opacity;
  transition: transform, opacity, -webkit-transform;
  -webkit-transition-duration: 0.3s, 0.3s;
          transition-duration: 0.3s, 0.3s;
  -webkit-transition-timing-function: cubic-bezier(0.35, -0.59, 0.47, 0.97);
          transition-timing-function: cubic-bezier(0.35, -0.59, 0.47, 0.97);
background: rgba(29, 37, 48, 0.5);
backdrop-filter: blur(16px);

}


/**
 * Transisition delays at the default state.
 */
.c-circle-menu__item:nth-child(1) {
  -webkit-transition-delay: 0.4s;
          transition-delay: 0.4s;
}

.c-circle-menu__item:nth-child(2) {
  -webkit-transition-delay: 0.3s;
          transition-delay: 0.3s;
}

.c-circle-menu__item:nth-child(3) {
  -webkit-transition-delay: 0.2s;
          transition-delay: 0.2s;
}

.c-circle-menu__item:nth-child(4) {
  -webkit-transition-delay: 0.1s;
          transition-delay: 0.1s;
}

.c-circle-menu__item:nth-child(5) {
  -webkit-transition-delay: 0s;
          transition-delay: 0s;
}

/**
 * We're using the .is-active class, which is added to the menu via JavaScript.
 * Once the menu is active, the items inherit the properties below. We will
 * manually write out the transform properties for first and last items, as we
 * already know their position. For all items in between though, we'll use some
 * polar-to-cartesian math and some Sass functions to get the positioning.
 */
.c-circle-menu.is-active .c-circle-menu__item {
  -webkit-transition-timing-function: cubic-bezier(0.35, 0.03, 0.47, 1.59);
          transition-timing-function: cubic-bezier(0.35, 0.03, 0.47, 1.59);
}

.c-circle-menu.is-active .c-circle-menu__item:nth-child(1) {
  -webkit-transition-delay: 0s;
          transition-delay: 0s;
  -webkit-transform:translate(-66px, 60px);
          transform: translate(-66px, 60px);
}



.c-circle-menu.is-active .c-circle-menu__item:nth-child(2) {
  -webkit-transition-delay: 0.1s;
          transition-delay: 0.1s;
  -webkit-transform: translate(-58px, 11px);
          transform: translate(-58px, 11px)
}



.c-circle-menu.is-active .c-circle-menu__item:nth-child(3) {
  -webkit-transition-delay: 0.2s;
          transition-delay: 0.2s;
  -webkit-transform:translate(-37px, -30px);
          transform:translate(-37px, -30px)
}



.c-circle-menu.is-active .c-circle-menu__item:nth-child(4) {
  -webkit-transition-delay: 0.3s;
          transition-delay: 0.3s;
  -webkit-transform:translate(0px, -59px);
          transform: translate(0px, -59px)
}



.c-circle-menu.is-active .c-circle-menu__item:nth-child(5) {
  -webkit-transition-delay: 0.4s;
          transition-delay: 0.4s;
  -webkit-transform:translate(50px, -70px);
          transform:translate(50px, -70px)
}



/**
 * Apart from the transform properties, we'll also make sure the items get
 * the correct opacity.
 */
.c-circle-menu.is-active .c-circle-menu__item {
  opacity: 1;
}

/**
 * Let's style the links now. This is just boilerplate stuff, and of course,
 * you'll probably want to change up the icons to match your needs. In any case,
 * we'll do it here for the sake of completion.
 */
a.c-circle-menu__link {
  display: block;
  width: 100%;
  height: 100%;
  border-radius: 50%;
  line-height:42px;
  color:#FFF;
  text-align:center;
  font-size:12px;
}
a.c-circle-menu__link:hover{
	color: #0C79FE;
}


.c-circle-menu__link img {
  display: block;
  max-width: 100%;
  height: auto;
}


/* -----------------------------------------------------------------------------

  The Toggle Component

----------------------------------------------------------------------------- */
/**
 * The toggle is a button element, and as such requires some resets that are
 * unique to buttons. This button also inherits some funky stuff from my
 * CSS animating hamburger menu icons demo, which can be found at this url:
 * https://github.com/callmenick/Animating-Hamburger-Icons
 */
.c-circle-menu__toggle {
  display: block;
  position: absolute;
  z-index: 100;
  margin: 0;
  padding: 0;
  width: 70px;
  height: 70px;
  border-radius: 50%;
  background: rgba(29, 37, 48, 0.5);
	backdrop-filter: blur(16px);
  -webkit-transition: background 0.3s;
  transition: background 0.3s;
  /* reset some browser defaults */
  cursor: pointer;
  border: none;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  box-shadow: none;
}

.c-circle-menu__toggle img{
	width:31px;
}

.c-circle-menu__toggle:hover,
.c-circle-menu__toggle:focus,
.c-circle-menu__toggle.is-active {
  outline: none;
}







/* button active state */
.c-circle-menu__toggle.is-active {
	width:110px;
	height:110px;
}
.c-circle-menu__toggle.is-active img{
	width:auto;
}


/* -----------------------------------------------------------------------------

  The Mask Component

----------------------------------------------------------------------------- */
/**
 * Here's the mask component, which actually gets created and inserted to the
 * DOM via JavaScript. It simply acts as an overlay to draw attention to the
 * menu when it is active. It also uses the .is-acvite state class.
 */
